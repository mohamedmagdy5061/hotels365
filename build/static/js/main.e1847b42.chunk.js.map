{"version":3,"sources":["forms/CardView.jsx","Slider/Slide.jsx","review/Review.jsx","forms/ShowView.jsx","ApiService/GetData.js","App.js","serviceWorker.js","index.js"],"names":["GridView","props","react_default","a","createElement","className","data","map","item","key","id","onClick","clicked","name","style","width","src","photo","alt","concat","pricePerNight","night","score","totalScore","totalReviews","Slide","state","counter","min","max","countUp","_this","setState","prevState","count","countDown","this","photos","length","_this2","_this$state","transform","ele","i","thumbnail","disabled","type","onChange","handelRange","value","Component","Review","pageView","numberNeedToShow","numberOfPages","sorted","getNumberOfPages","num","Math","ceil","reviews","range","from","to","step","arguments","undefined","push","listView","itemTo","view","Object","toConsumableArray","slice","sortReviewDown","e","sort","b","review","index","_index","_this$state2","bind","ShowView","updateData","objectSpread","changed","src_Slider_Slide","pictures","src_review_Review","url","GetDataById","axios","get","params","then","res","catch","error","console","App","itemToView","dataSource","handelClick","handelNight","target","forms_CardView","keys","src_forms_ShowView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1847b42.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CardView.css\";\n\nfunction rate(score){\n    if(score <= 7 ){\n        return `${score} good`\n    }else if(score > 7 && score < 9  ){\n        return `${score} Very good`\n    }else{\n        return `${score} Excellent`\n    }\n}\n\nconst GridView = props => {\n  return (\n    <div className=\"cardView\">\n      {props.data.map(item => (\n        <div key={item.id} className=\"card\" onClick={()=>props.clicked(item.id)}>\n          <div className=\"card__title\">\n            <p >{item.name}</p>\n          </div>\n          <div className=\"card__body\">\n            <div className=\"card__image\">\n              <img\n                style={{width:\"100%\"}}\n                src={item.photo}\n                alt=\"Img-hotel\"\n              />\n            </div>\n            <div className=\"card__info\">\n              <div className=\"card__info__price\" >{`$${item.pricePerNight * props.night} for ${props.night}  ${props.night > 1 ? 'Nights': 'Night'} `}</div>\n              <div className=\"card__info__rate\" >{rate(item.totalScore)}</div>\n              <div className=\"card__info__review\" >{`${item.totalReviews} reviews`}</div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GridView;\n","import React, { Component } from 'react';\nimport \"./Slide.css\"\n\n\nclass Slide extends Component {\nstate={\n  counter: 0,\n  min:0,\n  max:0,\n  data:[],\n}\n\ncomponentDidMount(){\n  this.setState({max:this.props.photos.length})\n  // this.setState({data:this.props.photos})\n}\n\ncountUp=()=>{\n  const {max} = this.state\n  \n  this.setState(prevState => {\n    const count = prevState.counter\n    if(count < max-1 ){\n      return {counter:count+1}\n    } \n\n  })\n}\n\ncountDown=()=>{\n  const {min} = this.state\n\n  this.setState(prevState => {\n    const count = prevState.counter\n    if(count > min ){\n      return {counter:count-1}\n    } \n  })\n}\n\n\n\n  render(){\n    const {counter,max}=this.state\n    \n    return(\n      <div>\n      <div className=\"slide__photo__big\">\n        <img src={this.props.photos[`${counter}`].photo} alt=\"hotel-img\"/>\n      </div>\n\n      <div className={`slide__photo__thumbnail slider-active-${counter}`}>\n        <div className=\"slider-wraper\" style={{transform: `translateX(-${counter*(100/this.state.max)}%)`}}>\n          {this.props.photos.map((ele,i)=><img id={`card-${i}`} className=\"slider__img\" src={ele.thumbnail} alt=\"hotel-img\"/>)}\n        </div>\n      </div>\n\n\n      <div className=\"slide__photo__range\" >\n        <button className=\"slide__photo__range__btn\"  disabled={counter<=0} onClick={this.countDown}>&laquo;</button>\n        <input type=\"range\" min={0} max={this.props.photos.length} onChange={()=>{this.handelRange(this)}} value={ counter === max-1 ? (counter+1):counter}/>\n        <button className=\"slide__photo__range__btn\" disabled={counter>=max-1}  onClick={this.countUp}>&raquo;</button>\n      </div>\n      </div>\n    )\n  }\n}\n\n\nexport default Slide","import React, { Component } from \"react\";\nimport \"./Review.css\";\n\nclass Review extends Component {\n  state = {\n    counter: 0,\n    min: 0,\n    max: 0,\n    data: [],\n    pageView: [],\n    numberNeedToShow: 3,\n    numberOfPages: \"\",\n    sorted: false\n  };\n\n  componentDidMount() {\n    this.setState({ max: this.props.reviews.length });\n    this.setState({ data: this.props.reviews});\n    this.getNumberOfPages();\n  }\n\n  getNumberOfPages = () => {\n    const num = Math.ceil(this.props.reviews.length / 3);\n    this.setState({ numberOfPages: num });\n  };\n\n  range = (from, to, step = 1) => {\n    let i = from;\n    const range = [];\n    while (i <= to) {\n      range.push(i);\n      i += step;\n    }\n    return range;\n  };\n\n  listView = num => {\n    \n    const { data,numberNeedToShow } = this.state;\n    const itemTo= num * numberNeedToShow + numberNeedToShow\n    const view = [...data].slice(numberNeedToShow * num,itemTo >= data.length ?  data.length :itemTo);\n    this.setState({ pageView: view, sorted: false });\n\n  };\n\n  sortReviewDown = (e)=>{\n    const {pageView} = this.state;\n    (pageView > 0 ? pageView : this.props.reviews).sort((a, b) => {\n        a = a.score;\n        b = b.score;\n        if(e === \"up\"){\n          return a > b ? -1 : a < b ? 1 : 0;\n        }else{\n          return a < b ? -1 : a > b ? 1 : 0;\n        }\n    });\n      this.props.reviews.map((review, index) => {\n      review._index = index\n      return review\n    } )\n    this.setState({pageView:pageView, sorted: true})\n  }\n\n  render() {\n    const {numberOfPages, pageView,numberNeedToShow} = this.state;\n    return (\n      <div className=\"review\">\n        <h2 className=\"review-action-sort\">\n          Reviews\n          <span className=\"review-action-sort-down\" onClick={this.sortReviewDown.bind(null,\"up\")}>\n            <i className=\"fas fa-angle-down\" />\n          </span>\n          <span\n            className=\"review-action-sort-up\"\n            onClick={this.sortReviewDown.bind(null,\"down\")}\n          >\n            <i className=\"fas fa-angle-up\" />\n          </span>\n        </h2>\n        <div className=\"review__data\">\n          {((pageView.length > 0 && !this.state.sorted) ? pageView : this.props.reviews).map(\n            (item, index) =>\n              (index < numberNeedToShow)  && (\n                <div className=\"review__body\" key={`item-index-${index}`}>\n                  <div className=\"review__body_numbers\">\n                    <span>{item._index+1}</span>\n                  </div>\n                  <div className=\"review__body_rev\">\n                    <p>{item.review}</p>\n                  </div>\n                </div>\n              )\n          )}\n\n          <div className=\"review__pagination\">\n            <nav>\n              <ul className=\"pagination\">\n              {this.props.reviews.map((ele,index)=>(\n                 (index < numberOfPages) && (\n                  <li className=\"page-item\" key={`pagination-index-${index}`}>\n                  <button onClick={() => this.listView(index)}>\n                    {index+1 }\n                  </button>\n                </li>\n                 )\n              ))}\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Review;\n","import React from \"react\";\nimport \"./ShowView.css\";\nimport Slide from \"../Slider/Slide\";\nimport Review from \"../review/Review\";\n\nconst ShowView = props => {\n  const updateData =  props.item.reviews.map((item,index) => item = {...item, ...{_index: index}})\n  return (\n    <div className=\"View\">\n      <div key={props.item.id} className=\"View__body\">\n      \n        <div className=\"view__body__title\">\n          <h1>{props.item.name}</h1>\n        </div>\n\n        <div className=\"view__body__night__control \">\n          <span>For</span>\n          <input\n            type=\"number\"\n            min={1}\n            onChange={props.changed}\n            value={props.night}\n          />\n          <span>{props.night > 1 ? 'Nights': 'Night'}</span>\n        </div>\n          <div className=\"view__body__slider\">\n            <Slide photos={props.item.pictures} />\n          </div>\n \n          <div className=\"card__info\">\n            <Review  reviews={updateData}/>\n          </div>\n  \n       </div>\n     </div>\n  );\n};\n\nexport default ShowView;\n","import axios from \"../../node_modules/axios\";\n\n\nconst url = \"http://my-json-server.typicode.com/fly365com/code-challenge\"\n\n\nexport const GetData = ()=>{\n return( axios.get(`${url}/hotels`).then(res => {\n      return res.data;\n   })\n   .catch(error => console.error(\"Response Error ===>:\",error)))\n}\n\nexport const GetDataById = (id)=>{\n    return( axios.get(`${url}/hotelDetails/`, {\n        params: {id}\n    })\n    .then(res => {\n         return res.data;\n      })\n      .catch(error => console.error(\"Response Error ID ===>:\",error)))\n   }\n   \n   ","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardView from \"./forms/CardView\";\nimport ShowView from \"./forms/ShowView\";\nimport { GetData, GetDataById } from \"./ApiService/GetData\";\n\nclass App extends Component {\n  state = {\n    data: [\n      {\n        id: 37681,\n        name: \"Hilton Sharm\",\n        totalReviews: 1678,\n        totalScore: 8.5,\n        pricePerNight: 180,\n        photo: \"http://picsum.photos/100/100/?image=109\"\n      },\n      {\n        id: 18671,\n        name: \"Sheraton Sharm\",\n        totalReviews: 78,\n        totalScore: 9,\n        pricePerNight: 80,\n        photo: \"http://picsum.photos/100/100/?image=110\"\n      },\n      {\n        id: 27861,\n        name: \"Grand Hayatt Sharm\",\n        totalReviews: 678,\n        totalScore: 7,\n        pricePerNight: 300,\n        photo: \"http://picsum.photos/100/100/?image=112\"\n      }\n    ],\n    itemToView: {},\n    night: 1,\n    dataSource: []\n  };\n\n  componentDidMount() {\n    GetData().then(data => {\n      this.setState(() => {\n        return { dataSource: data };\n      });\n    });\n  }\n\n  handelClick = id => {\n    GetDataById(id).then(item => {\n      this.setState({ itemToView: item[0] });\n    });\n  };\n\n  handelNight = e => {\n    this.setState({ night: e.target.value });\n  };\n\n  render() {\n    const { itemToView } = this.state;\n    return (\n      <div className=\"App\">\n        <CardView\n          data={this.state.data}\n          clicked={this.handelClick}\n          night={this.state.night}\n        />\n        {Object.keys(itemToView).length > 0 && (\n          <ShowView\n            item={this.state.itemToView}\n            changed={this.handelNight}\n            night={this.state.night}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}